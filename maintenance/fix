#!/usr/bin/env ruby

# Simple script for evaluating, formatting and/or
# freezing all `.dhall` files in a workspace

require 'find'
require 'open3'

def run(cmd)
	unless system(*cmd)
		puts("FAILED: #{cmd.join(' ')}")
		exit(1)
	end
end

def main
	require 'optparse'
	actions = []
	options = {
		cache: false,
		all: false,
		fix_imports: true,
	}
	args = OptionParser.new do |p|
		p.banner = [
			"Usage: fix [OPTIONS] [PATH ...]",
			"",
			"If no paths are given, the current directory is used",
			"\n",
		].join("\n")

		action = -> (id, desc) do
			p.on("--#{id}", desc) { || actions << :format }
		end

		action.call(:format, "Format files")
		action.call(:eval, "Test that all files evaluate")
		action.call(:freeze, "Freeze imports")
		action.call(:lint, "Canonicalize code")

		p.on('--no-fix-imports', "Skip hack for dhall-haskell#1672") do ||
			options[:fix_imports] = false
		end

		p.on('--cache', "(used with --freeze)") do ||
			options[:cache] = true
		end
		p.on('--all', "(used with --freeze)") do ||
			options[:all] = true
		end
	end.parse(ARGV)

	actions = [:eval, :format] if actions.empty?
	args << '.' if args.empty?

	args.each do |base|
		Find.find(base).each do |path|
			next if File.symlink?(path)
			next unless path.end_with?('.dhall')
			puts("[#{path}]")

			fix_imports = -> () do
				if options[:fix_imports]
					# workaround https://github.com/dhall-lang/dhall-haskell/issues/1672
					contents = File.read(path)
					fixed = contents.gsub(/(http[^ ]+ using) ([.\\\/~][^ ]+) (sha256:[^ $])/) do |x|
						match = Regexp.last_match
						"#{match[1]} (#{match[2]}) #{match[3]}"
					end
					if fixed != contents
						File.write(path, fixed)
					end
				end
			end

			if actions.include?(:freeze)
				cmd = ['dhall', '--ascii', 'freeze', '--inplace', path]
				cmd << '--cache' if options.fetch(:cache)
				cmd << '--all' if options.fetch(:all)
				run(cmd)
				fix_imports.call
			end

			if actions.include?(:eval)
				run(['dhall', '--plain', '--output', '/dev/null', '--file', path ])
			end

			if actions.include?(:format)
				run(['dhall', '--ascii', 'format', '--inplace', path])
				fix_imports.call
			end

			if actions.include?(:lint)
				run(['dhall', '--ascii', 'lint', '--inplace', path])
				fix_imports.call
			end
		end
	end
end

main
