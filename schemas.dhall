let Format = < YAML | JSON | Raw >

let Install = < Symlink | Write | None >

let Options =
      { Type = { destination : Text }, default.destination = "generated" }

let HeaderBracket = { prefix : Text, linePrefix : Text, suffix : Text }

let HeaderType =
    -- Ignore: Bool is a hack to distinguish this case in `dhall-to-json`,
    -- with no associated value it serializes as the string "Ignore",
    -- which is the same type as Prefix
      < Ignore : Bool | Prefix : Text | Bracket : HeaderBracket >

let Header =
      { Type = HeaderType
      , ignore = HeaderType.Ignore False
      , raw = HeaderType.Prefix ""
      , hash = HeaderType.Prefix "# "
      , doubleSlash = HeaderType.Prefix "// "
      , doubleDash = HeaderType.Prefix "-- "
      , multiLineC =
          HeaderType.Bracket { prefix = "/*", suffix = "*/", linePrefix = "  " }
      , html =
          HeaderType.Bracket
            { prefix = "<!--", suffix = "-->", linePrefix = "  " }
      }

let Metadata =
      { format : Format
      , install : Install
      , executable : Bool
      , path : Optional Text
      , header :
          -- header is deprecated
          -- (headerLines lets you specify a format-independent header,
          -- and pair it with a format-sepcific headerFormat)
          Optional Text
      , headerLines : List Text
      , headerFormat : Header.Type
      }

let defaultHeader =
      [ "**NOTE**: this file is generated by `dhall-render`."
      , "You should NOT edit it manually, your changes will be lost."
      ]

let defaultMetadata =
      { install = Install.Symlink
      , header = None Text
      , headerLines = defaultHeader
      , headerFormat =
          -- Hash matches the most target formats (yaml & most script types)
          Header.hash
      , path = None Text
      , executable = False
      }

let File =
    -- base File type with contents of type T
      \(T : Type) ->
        { Type = Metadata //\\ { contents : T }, default = defaultMetadata }

let withFormat =
    -- File with a specific format
      \(format : Format) ->
      \(headerFormat : Header.Type) ->
      \(T : Type) ->
        let file = File T

        in  file // { default = file.default // { format, headerFormat } }

let TextFile = withFormat Format.Raw Header.hash Text

let YAMLFile = withFormat Format.YAML Header.hash

let JSONFile = withFormat Format.JSON Header.ignore

let MarkdownFile = TextFile with default.headerFormat = Header.html

let Executable = TextFile with default.executable = True

in  { File
    , Format
    , Header
    , TextFile
    , Executable
    , YAMLFile
    , JSONFile
    , MarkdownFile
    , Install
    , Metadata
    , Options
    }
